% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci.R
\name{permci_cont}
\alias{permci_cont}
\title{Randomization-Based CI with continuous outcomes}
\usage{
permci_cont(f, outcomename, trtname, runit, trtunit = NULL,
  strat = NULL, data, nperm = 1000, nburn = 0, level = 0.95, init,
  ncores = 1, seed, quietly = F, method = "G", m, k, Ps = NULL, n,
  restrictedDf = NULL, restrictedDfType = NULL)
}
\arguments{
\item{f}{a function that must be defined such that when
applied to \code{data}, it returns the observed univariate test statistic.
This function can be as simple or complex as desired as long as its one input
argument is a data frame structured the same as \code{data}.}

\item{outcomename}{character string specifying the name of continuous
outcome variable in \code{data} (i.e. specifies the variable to transform
for CI)}

\item{trtname}{character string specifying the name of randomized treatment
variable in \code{data} (i.e. specifies the variable to permute)}

\item{runit}{character string specifying the name of unit of randomization
in \code{data} (i.e. specifies the level at which trtname will be permuted)}

\item{trtunit}{character string specifying the name of the unit that
corresponds to a unique scalar treatment assignment value (i.e. specifies how
trtname will be permuted at runit level, see Details below). If trtunit =
NULL (default), trtunit is assumed equivalent to runit.}

\item{strat}{an optional character string specifying the name of the variable
in \code{data} upon which randomization was stratified}

\item{data}{a data frame containing the variables in the model. This argument
is passed to the corresponding regression function, e.g.
\code{\link[stats]{glm}} (see Details).}

\item{nperm}{number of permutations for each randomization CI bound}

\item{nburn}{number of ``burn-in'' permutations. I.e. algorithm will start at
\code{init} bounds, run for \code{nburn} permutations, then restart algorithm
at latest estimates from ``burn-in'' phase and run for another \code{nperm}
permutations until the final CI estimates are reached. Increasing
\code{nburn} may help convergence if \code{init} CI bounds are poor.}

\item{level}{two-sided confidence level (e.g. level = 0.95 for 95\% CI)}

\item{init}{vector of initial values for CI, with lower bound as
first element and upper bound as second. If \code{init} not provided,
initial bounds are based on \code{initmethod}.}

\item{ncores}{number of cores to use for computation. If \code{ncores} > 1,
lower and upper bound search procedures run in parallel across 2 cores.}

\item{seed}{a numerical seed to use, passed to \code{\link[base]{set.seed}}
(if \code{ncores == 1}) or \code{\link[doRNG]{registerDoRNG}} (if
\code{ncores > 1}).}

\item{quietly}{logical; if TRUE (and if ncores == 1), status updates will be
printed to Console otherwise, suppress updates.}

\item{method}{if method = 'G' (default), then search is carried out as
described in \href{http://doi.org/10.2307/2532852}{Garthwaite (1996)}. For
longer searches (nperm >= 200,000), method = 'GJ' is recommended and carried
out as outlined in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)}.}

\item{m}{an optional initial magnitude of the steps; if left unspecified,
m defaults to recommended value proposed in Garthwaite and Buckland (1992)}

\item{k}{step length multiplier}

\item{Ps}{if method = 'GJ', vector of search lengths for each phase (if
unspecified, defaults to recommended values in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)})}

\item{n}{if method = 'GJ', the unweighted averages of the final \code{n}
values are taken as the final CI (if unspecified, defaults to recommended
value in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)})}
}
\description{
Calculate a randomization-based confidence interval (CI) for a parameter
based on continuous outcomes
}
\details{
This function is used to calculate randomization-based confidence
intervals (CI) for a parameter based on continuous outcomes. These CIs
correspond to inverting randomization tests by using the typical approach for
continuous outcomes by subtracting a fixed value from all individual-level
outcomes in one group. To invert the randomization test, these functions adapt
a computationally efficient CI algorithm based on the Robbins-Monro search
process. Two methods can be used and correspond to
\href{http://doi.org/10.2307/2532852}{Garthwaite (1996)} and
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)}.
This function assumes trtname takes values 0 and 1, with 1 corresponding to
the intervention/treatment group.
}
\seealso{
\code{\link[permuter]{permtest}} for a randomization test
}
