% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci.R
\name{permci}
\alias{permci}
\title{Randomization-Based CI for regression}
\usage{
permci(model, trtname, runit, strat = NULL, data, nperm = 1000,
  nburn = 0, level = 0.95, init, initmethod = "perm", ncores = 1,
  seed, quietly = F, method = "G", m, k, Ps = NULL, n)
}
\arguments{
\item{model}{an appropriate fitted model object, see Details}

\item{trtname}{character string specifying the name of randomized treatment
variable in \code{data} (variable to permute)}

\item{runit}{character string specifying the name of unit of randomization
in \code{data}}

\item{strat}{an optional character string specifying the name of the variable
in \code{data} upon which randomization was stratified}

\item{data}{a data frame containing the variables in the model. This argument
is passed to the corresponding regression function, e.g.
\code{\link[stats]{glm}} (see Details).}

\item{nperm}{number of permutations for each randomization CI bound}

\item{nburn}{number of ``burn-in'' permutations. I.e. algorithm will start at
\code{init} bounds, run for \code{nburn} permutations, then restart algorithm
at latest estimates from ``burn-in'' phase and run for another \code{nperm}
permutations until the final CI estimates are reached. Increasing
\code{nburn} may help convergence if \code{init} CI bounds are poor.}

\item{level}{two-sided confidence level (e.g. level = 0.95 for 95\% CI)}

\item{init}{vector of initial values for CI, with lower bound as
first element and upper bound as second. If \code{init} not provided,
initial bounds are based on \code{initmethod}.}

\item{initmethod}{character; indicates the method to be used for initial
values for CI. If "asymp", initial bounds are based on asymptotic
approximation (e.g. Wald CI for GLM). If "perm" (default), initial bounds are based
on the permutation approach used in Garthwaite (1996) with \eqn{\hat{\theta}
\pm \{(t_2 - t_1)/2\}}, where \eqn{t_1} and \eqn{t_2} denote the second
smallest and second largest estimates from the permutation test.}

\item{ncores}{number of cores to use for computation. If \code{ncores} > 1,
lower and upper bound search procedures run in parallel across 2 cores.}

\item{seed}{a numerical seed to use, passed to \code{\link[base]{set.seed}}
(if \code{ncores == 1}) or \code{\link[doRNG]{registerDoRNG}} (if
\code{ncores > 1}).}

\item{quietly}{logical; if TRUE (and if ncores == 1), status updates will be
printed to Console otherwise, suppress updates.}

\item{method}{if method = 'G' (default), then search is carried out as
described in \href{http://doi.org/10.2307/2532852}{Garthwaite (1996)}. For
longer searches (nperm >= 200,000), method = 'GJ' is recommended and carried
out as outlined in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)}.}

\item{m}{an optional initial magnitude of the steps; if left unspecified,
m defaults to recommended value proposed in Garthwaite and Buckland (1992)}

\item{k}{step length multiplier}

\item{Ps}{if method = 'GJ', vector of search lengths for each phase (if
unspecified, defaults to recommended values in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)})}

\item{n}{if method = 'GJ', the unweighted averages of the final \code{n}
values are taken as the final CI (if unspecified, defaults to recommended
value in
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)})}
}
\description{
Calculate a randomization-based confidence interval (CI) for a regression
parameter.
}
\details{
This function is used to calculate randomization-based confidence
intervals (CI) for a regression parameter. These CIs correspond to inverting
randomization tests by using an offset to test non-zero "null" values
(Rabideau and Wang). To invert the randomization test, these functions adapt
a computationally efficient CI algorithm based on the Robbins-Monro search
process. Two methods can be used and correspond to
\href{http://doi.org/10.2307/2532852}{Garthwaite (1996)} and
\href{https://doi.org/10.1198/jcgs.2009.0011}{Garthwaite and Jones (2009)}.

The argument \code{model} must correspond to a regression model that
accomodates an offset term (see \link[stats]{offset}) and one for which
coefficients can be extracted in the standard way (see \link[stats]{coef}).
E.g. an object of class "glm" (see \link[stats]{glm}), "survreg" (see
\link[survival]{survreg}), "coxph" (see \link[survival]{coxph}), etc.
}
\examples{
# Calculate randomization-based CI for the incidence rate ratio (IRR) of
# bacterial pneumonia episodes between the two intervention groups in
# pneumovac data set. (Note, it will take a few seconds to run 1,000
# permutations)

head(pneumovac) # visualize data
m1 <- glm(bpepisodes ~ spnvac, family = poisson, data = pneumovac) # fit GLM
ci <- permci(m1, trtname = 'spnvac',
             runit = 'randunit', data = pneumovac,
             nperm = 1000, ncores = 2, seed = 445)
print(ci$ci)
#       lower       upper
# -0.97314014  0.06265964
plot(ci) # monitor convergence of CI search

}
\seealso{
\code{\link[permuter]{permtest}} for a randomization test
}
