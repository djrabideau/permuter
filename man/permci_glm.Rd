% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci.R
\name{permci_glm}
\alias{permci_glm}
\alias{permci_ic_sp}
\alias{permci_survreg}
\alias{permci_coxph}
\title{Randomization CI for regression}
\usage{
permci_glm(formula, trtname, runit, strat = NULL, family = gaussian,
  data, nperm = 1000, nburn = 0, level = 0.95, init,
  initmethod = "perm", ncores = 1, seed, quietly = F, ...)

permci_ic_sp(formula, trtname, runit, strat = NULL, data, nperm = 1000,
  nburn = 0, level = 0.95, init, initmethod = "perm", ncores = 1,
  seed, quietly = F, ...)

permci_survreg(formula, trtname, runit, strat = NULL, data,
  dist = "weibull", nperm = 1000, nburn = 0, level = 0.95, init,
  initmethod = "perm", ncores = 1, seed, quietly = F, ...)

permci_coxph(formula, trtname, runit, strat = NULL, data, nperm = 1000,
  nburn = 0, level = 0.95, init, initmethod = "perm", ncores = 1,
  seed, quietly = F, ...)
}
\arguments{
\item{formula}{an object of class "\code{\link[stats]{formula}}"
(or one that can be coerced to that class): a symbolic description of the
model to be fitted. This argument is passed to the corresponding regression
function, e.g. \code{\link[stats]{glm}} (see Details).}

\item{trtname}{character string specifying the name of randomized treatment
variable in \code{data} (variable to permute)}

\item{runit}{character string specifying the name of unit of randomization
in \code{data}}

\item{strat}{an optional character string specifying the name of the variable
in \code{data} upon which randomization was stratified}

\item{family}{a description of the error distribution and link function to
be used in the model. This can be a character string naming a family
function, a family function or the result of a call to a family function.
(See \code{\link[stats]{family}} for details.)}

\item{data}{a data frame containing the variables in the model. This argument
is passed to the corresponding regression function, e.g.
\code{\link[stats]{glm}} (see Details).}

\item{nperm}{number of permutations for each randomization CI bound}

\item{nburn}{number of ``burn-in'' permutations. I.e. algorithm will start at
\code{init} bounds, run for \code{nburn} permutations, then restart algorithm
at latest estimates from ``burn-in'' phase and run for another \code{nperm}
permutations until the final CI estimates are reached. Increasing
\code{nburn} may help convergence if \code{init} CI bounds are poor.}

\item{level}{two-sided confidence level (e.g. level = 0.95 for 95\% CI)}

\item{init}{vector of initial values for CI, with lower bound as
first element and upper bound as second. If \code{init} not provided,
initial bounds are based on \code{initmethod}.}

\item{initmethod}{character; indicates the method to be used for initial
values for CI. If "asymp", initial bounds are based on asymptotic
approximation (e.g. Wald CI for GLM). If "perm" (default), initial bounds are based
on the permutation approach used in Garthwaite (1996) with \eqn{\hat{\theta}
\pm \{(t_2 - t_1)/2\}}, where \eqn{t_1} and \eqn{t_2} denote the second
smallest and second largest estimates from the permutation test.}

\item{ncores}{number of cores to use for computation. If \code{ncores} > 1,
lower and upper bound search procedures run in parallel across 2 cores.}

\item{seed}{a numerical seed to use, passed to \code{\link[base]{set.seed}}
(if \code{ncores == 1}) or \code{\link[doRNG]{registerDoRNG}} (if
\code{ncores > 1}).}

\item{quietly}{logical; if TRUE (and if ncores == 1), status updates will be
printed to Console otherwise, suppress updates.}

\item{...}{optional arguments to \code{\link[permuter]{update_rm}}, e.g.
\code{m} controls the initial magnitude of the steps}

\item{dist}{assumed distribution for y variable. If the argument is a
character string, then it is assumed to name an element from
\code{\link[survival]{survreg.distributions}}. These include "weibull",
"exponential", "gaussian", "logistic","lognormal" and "loglogistic".
Otherwise, it is assumed to be a user defined list conforming to the format
described in \code{\link[survival]{survreg.distributions}}.}
}
\description{
Calculate a randomization confidence interval (CI) for a regression parameter.
}
\details{
These functions are used to calculate randomization confidence intervals (CI)
for a regression parameter. These CIs correspond to inverting randomization
tests by using an offset to test non-zero "null" values. To invert the
randomization test, these functions use a computationally efficient CI
algorithm proposed by
\href{http://doi.org/10.2307/2532852}{Garthwaite (1996)}, which is based on
the Robbins-Monro search process.

Different functions
corrrespond to different regression models:
\itemize{
  \item \code{permci_glm}: randomization CI based on
  \code{\link[stats]{glm}}
  \item \code{permci_ic_sp}: randomization CI based on
  \code{\link[icenReg]{ic_sp}}
  \item \code{permci_survival::survreg}: randomization CI based on
  \code{\link[survival]{survival::survreg}}
  \item \code{permci_coxph}: randomization CI based on
  \code{\link[survival]{coxph}}
}
To ensure correct specification of the parameters passed to the models above
(e.g. \code{formula} in \code{\link[icenReg]{ic_sp}}), please refer to their
documentation.
}
